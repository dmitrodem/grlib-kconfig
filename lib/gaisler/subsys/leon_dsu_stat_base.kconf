menu "Processor"

choice
    prompt "Select processor (Changes file list - requires `make distclean`)"
    default LEON3

config LEON3
    bool "LEON3"
config LEON4
    bool "LEON4"
endchoice

config PROC_NUM
    int "Number of processors"
    default 1
    help
    The number of processor cores.

menu "Integer unit"

config IU_NWINDOWS
    int "SPARC register windows"
    default 8
    help
    The SPARC architecture (and LEON) allows 2 - 32 register windows.
    However, any number except 8 will require that you modify and 
    recompile your run-time system or kernel. Unless you know what
    you are doing, use 8.

menuconfig IU_V8MULDIV
    bool "SPARC V8 MUL/DIV instructions"
    default n
    help
    If you say Y here, the SPARC V8 multiply and divide instructions
    will be implemented. The instructions are: UMUL, UMULCC, SMUL,
    SMULCC, UDIV, UDIVCC, SDIV, SDIVCC. In code containing frequent
    integer multiplications and divisions, significant performance
    increase can be achieved. Emulated floating-point operations will
    also benefit from this option.

    By default, the gcc compiler does not emit multiply or divide
    instructions and your code must be compiled with -mv8 to see any
    performance increase. On the other hand, code compiled with -mv8
    will generate an illegal instruction trap when executed on processors
    with this option disabled.

    The divider consumes approximately 2 kgates, the multiplier 6 kgates.

choice 
    prompt "Hardware multiplier latency"
    depends on IU_V8MULDIV
    default IU_MUL_LATENCY_5
    help
    Implementation options for the integer multiplier.

    Type        Implementation              issue-rate/latency
    2-clocks    32x32 pipelined multiplier     1/2 
    4-clocks    16x16 standard multiplier      4/4
    5-clocks    16x16 pipelined multiplier     4/5

config IU_MUL_LATENCY_2
    bool "2-cycles"
config IU_MUL_LATENCY_4
    bool "4-cycles"
config IU_MUL_LATENCY_5
    bool "5-cycles"
endchoice

config IU_MUL_MAC
    bool "SPARC V8e SMAC/UMAC instructions"
    depends on IU_V8MULDIV && (IU_MUL_LATENCY_4 || IU_MUL_LATENCY_5)
    default n
    help
    If you say Y here, the SPARC V8e UMAC/SMAC (multiply-accumulate)
    instructions will be enabled. The instructions implement a
    single-cycle 16x16->32 bits multiply with a 40-bits accumulator.
    The details of these instructions can be found in the LEON manual,
    This option is only available when 16x16 multiplier is used.

choice
    prompt "Multipler structure"
    depends on IU_V8MULDIV
    default IU_MUL_INFERRED
    help
    Structure options for the integer multiplier. The multiplier
    can be implemented with the following structures:

    * Inferred by the synthesis tool
    * Generated using Module Generators from NTNU
    * Using technology specific netlists (TechSpec)
    * Using Synopsys Designware (DW02_mult and DW_mult_pipe)

config IU_MUL_INFERRED
    bool "Inferred"
config IU_MUL_MODGEN
    bool "NTNU_Modgen" 
config IU_MUL_TECHSPEC
    bool "TechSpec"
config IU_MUL_DW
    bool "Designware"
endchoice

config IU_SVT
    bool "Single-vector trapping"
    default n
    help
    Single-vector trapping is a SPARC V8e option to reduce code-size
    in small applications. If enabled, the processor will jump to 
    the address of trap 0 (tt = 0x00) for all traps. No trap table
    is then needed. The trap type is present in %psr.tt and must
    be decoded by the O/S. Saves 4 Kbyte of code, but increases
    trap and interrupt overhead. Currently, the only O/S supporting
    this option is eCos. To enable SVT, the O/S must also set bit 13
    in %asr17.

config IU_LDELAY
      int "Load delay"
      default 1
      help
      Defines the pipeline load delay (= pipeline cycles before the data
      from a load instruction is available for the next instruction).
      One cycle gives best performance, but might create a critical path
      on targets with slow (data) cache memories. A 2-cycle delay can
      improve timing but will reduce performance with about 5%.

      Note that LEON4 always makes use of load delay 1.

config IU_WATCHPOINTS
      int "Hardware watchpoints"
      default 0
      help
      The processor can have up to 4 hardware watchpoints, allowing to 
      create both data and instruction breakpoints at any memory location,
      also in PROM. Each watchpoint will use approximately 500 gates.
      Use 0 to disable the watchpoint function. 
      
config PWD
      bool "Enable power-down mode"
      default n
      help
      Say Y here to enable the power-down feature of the processor.
      Might reduce the maximum frequency slightly on FPGA targets.
      For details on the power-down operation, see the LEON manual.

config IU_RSTADDR
      hex "Reset start address (addr[31:12])"
      default 0000
      help
      By default, a SPARC processor starts execution at address 0.
      With this option, any 4-kbyte aligned reset start address can be
      choosen. Keep at 0 unless you really know what you are doing.

config NP_ASI
      bool "SPARC V8E non-privileged ASI access"
      default n
      help
      In SPARC-V8E implementations providing for non-privileged ASI access
      functions, LOAD and STORE from Alternate space instructions
      accessing ASI’s 0016 - 7F16 are privileged instructions. LOAD and
      STORE from Alternate space instructions accessing ASI’s 8016 - FF16
      are non-privileged instructions. This option enables this non-
      privileged behavior.

config WRPSR
      bool "SPARC V8E partial Write %psr (WRPSR)"
      default n
      
config ALTWIN
    bool "SPARC V8E AWP and regfile partitioning"
    depends on LEON3
    default n

config REX
    bool "Enable LEON-REX extension"

endmenu # Integer unit

menu "Floating-point unit"

menuconfig FPU_ENABLE
    bool "Enable FPU"
    default n
    help
    Say Y here to enable the floating-point interface for GRFPU-lite
    or GRFPU. Note that no FPU's are provided with the GPL version
    of GRLIB. The FPUs are commercial cores and must be obtained separately.

choice 
    prompt "FPU Core"
    depends on FPU_ENABLE
    default FPU_GRFPU
    help
    Select between Gaisler Research's GRFPU and GRFPU-lite FPUs.

config FPU_GRFPU
    bool "GRFPU"
config FPU_GRFPULITE
    bool "GRFPU-LITE"
endchoice

choice 
    prompt "GRFPU multiplier"
    depends on FPU_ENABLE && FPU_GRFPU
    default FPU_GRFPU_INFMUL
    help
    On FPGA targets choose inferred multiplier. For ASIC implementations 
    choose between Synopsys Design Ware (DW) multiplier or Module 
    Generator (ModGen) multiplier. The DW multiplier gives better results 
    (smaller area and better timing) but requires a DW license. 
    The ModGen multiplier is part of GRLIB and does not require a license.

config FPU_GRFPU_INFMUL
    bool "Inferred"
config FPU_GRFPU_DWMUL
    bool "DW"
config FPU_GRFPU_MODGEN
    bool "ModGen"
config FPU_GRFPU_TECHSPEC
    bool "TechSpec"
endchoice

config FPU_GRFPU_SH
    bool "Shared GRFPU"
    depends on FPU_ENABLE
    default n
    help
    If enabled multiple CPU cores will share one GRFPU.	

choice
    prompt "GRFPU-LITE controller"
    depends on FPU_ENABLE && FPU_GRFPULITE
    default FPU_GRFPC0
    help
    Configures the GRFPU-LITE controller. 

    In simple configuration controller executes FP instructions 
    in parallel with  integer instructions. FP operands are fetched 
    in the register file stage and the result is written in the write 
    stage. This option uses least area resources.

    Data forwarding configuration gives ~ 10 % higher FP performance than 
    the simple configuration by adding data forwarding between the pipeline
    stages. 

    Non-blocking controller allows FP load and store instructions to
    execute in parallel with FP instructions. The performance increase is 
    ~ 20 % for FP applications. This option uses most logic resources and 
    is suitable for ASIC implementations. 

config FPU_GRFPC0
    bool "Simple"
config FPU_GRFPC1
    bool "Data-forwarding"
config FPU_GRFPC2
    bool "Non-blocking"
endchoice

endmenu # Floating-point unit

menu "Cache system"

menuconfig ICACHE_ENABLE
    bool "Enable instruction cache"
    default n
    help
    The instruction cache should always be enabled to allow
    maximum performance. Some low-end system might want to
    save area and disable the cache, but this will reduce
    the performance with a factor of 2 - 3.
    
choice
    prompt "Associativity (ways)"
    depends on ICACHE_ENABLE
    default ICACHE_ASSO1
    help
    The instruction cache can be implemented as a multi-way cache with
    1 - 4 sets. Higher associativity usually increases the cache hit
    rate and thereby the performance. The downside is higher power
    consumption and increased gate-count for tag comparators.

    Note that a 1-way cache is effectively a direct-mapped cache.

config ICACHE_ASSO1
    bool "1"
config ICACHE_ASSO2
    bool "2"
config ICACHE_ASSO3
    bool "3"
config ICACHE_ASSO4
    bool "4"
endchoice

choice 
    prompt "Way size (kbytes/way)"
    depends on ICACHE_ENABLE
    default ICACHE_SZ4
    help
    The size of each way in the instuction cache (kbytes). Valid values
    are 1 - 64 in binary steps. Note that the full range is only supported
    by the generic and virtex2 targets. Most target packages are limited
    to 2 - 16 kbyte. A large cache gives higher performance but might
    affect the maximum frequency (on ASIC targets). The total instruction
    cache size is the number of ways multiplied with the way size.

config ICACHE_SZ1
    bool "1" 
config ICACHE_SZ2
    bool "2" 
config ICACHE_SZ4
    bool "4"
config ICACHE_SZ8
    bool "8" 
config ICACHE_SZ16
    bool "16" 
config ICACHE_SZ32
    bool "32"
config ICACHE_SZ64
    bool "64" 
config ICACHE_SZ128
    bool "128" 
config ICACHE_SZ256
    bool "256"
endchoice

choice
    prompt "Line size (bytes/line)"
    depends on ICACHE_ENABLE
    default ICACHE_LZ32
    help
    The instruction cache line size. Can be set to either 16 or 32
    bytes per line. Instruction caches typically benefit from larger
    line sizes, but on small caches it migh be better with 16 bytes/line
    to limit eviction miss rate.

config ICACHE_LZ16
    bool "16"
config ICACHE_LZ32
    bool "32"
endchoice

choice
    prompt "Replacement alorithm"
    depends on ICACHE_ENABLE && (! ICACHE_ASSO1)
    default ICACHE_ALGORND
    help
    Cache replacement algorithm for caches with 2 - 4 sets. The 'Random'
    algorithm selects the way to evict randomly. For LEON4, "Dynamic" option
    makes the replacement policy soft configurable between direct-mapped,
    least-recently-replaced/incremental (LRR), least-recently-used (LRU)
    and random. The replacement policy is then chosen at run-time via the
    cache configuration register(s). The reset value in case 'Dynamic' is
    selected here is LRU. For LEON3, LRU/Dynamic is hard LRU

    The direct-mapped option selects the way based on the address.
    The LRR algorithm evicts the way least recently replaced.
    The LRU algorithm evicts the way least recently accessed.

    The random algorithm uses a simple 1- or 2-bit counter to select
    the eviction way and has low area overhead. The soft configurable
    option with LRU scheme selected has typically the best performance
    but also the highest area overhead. A 2-way LRU uses 1 flip-flop per
    line, a 3-way LRU uses 3 flip-flops per line, and a 4-way LRU uses 5
    flip-flops per line to store the access history.

config ICACHE_ALGORND
    bool "Random"
config ICACHE_ALGOLRU
    bool "LRU/Dynamic"
endchoice

config ICACHE_LOCK
    bool "Cache locking"
    depends on ICACHE_ENABLE && (! ICACHE_ASSO1) && LEON3
    default n
    help
    Say Y here to enable cache locking in the instruction cache.
    Locking can be done on cache-line level, but will increase the
    width of the tag ram with one bit. If you don't know what
    locking is good for, it is safe to say N.  

config ICACHE_LRAM
    bool "Enable local instruction RAM"
    depends on LEON3 && MMU_ENABLE
    
choice
    prompt "Local data RAM size (kbytes)"
    depends on ICACHE_LRAM
    default ICACHE_LRAM_SZ4
    help
    Defines the size of the local data ram in Kbytes. Note that most
    technology libraries do not support larger rams than 16 Kbyte.
config ICACHE_LRAM_SZ1
    bool "1"
config ICACHE_LRAM_SZ2
    bool "2"
config ICACHE_LRAM_SZ4
    bool "4" 
config ICACHE_LRAM_SZ8
    bool "8"
config ICACHE_LRAM_SZ16
    bool "16"
config ICACHE_LRAM_SZ32
    bool "32"
config ICACHE_LRAM_SZ64
    bool "64"
config ICACHE_LRAM_SZ128
    bool "128" 
config ICACHE_LRAM_SZ256
    bool "256"
endchoice

config ICACHE_LRSTART
    hex "Local instruction RAM start address (8 MSB)"
    depends on LEON3 && ICACHE_LRAM
    default 8E

menuconfig DCACHE_ENABLE
    bool "Enable data cache"
    default n
    help
    The data cache should always be enabled to allow
    maximum performance. Some low-end system might want to
    save area and disable the cache, but this will reduce
    the performance with a factor of 2 at least.

choice
    prompt "Associativity (ways)"
    depends on DCACHE_ENABLE
    default DCACHE_ASSO1
    help
    The data cache can be implemented as a multi-way cache with
    1 - 4 sets. Higher associativity usually increases the cache hit
    rate and thereby the performance. The downside is higher power
    consumption and increased gate-count for tag comparators.

    Note that a 1-way cache is effectively a direct-mapped cache.

    If the MMU is enabled then bus snooping is required to avoid
    aliasing effects in multi-way caches.

config DCACHE_ASSO1
    bool "1"
config DCACHE_ASSO2
    bool "2"
config DCACHE_ASSO3
    bool "3"
config DCACHE_ASSO4
    bool "4"
endchoice

choice
    prompt "Way size (kbytes/ways)"
    depends on DCACHE_ENABLE
    default DCACHE_SZ4
    help
    The size of each way in the data cache (kbytes). Valid values are
    1 - 64 in binary steps. Note that the full range is only supported
    by the generic and virtex2 targets. Most target packages are limited
    to 2 - 16 kbyte. A large cache gives higher performance but the
    data cache is timing critical an a too large setting might affect
    the maximum frequency (on ASIC targets). The total data cache size
    is the number of ways multiplied with the way size.

    Note that when the MMU is enabled, bus snooping should also be
    enabled and the data cache way size should not exceed the MMU
    page size.

config DCACHE_SZ1
    bool "1"
config DCACHE_SZ2
    bool "2"
config DCACHE_SZ4
    bool "4"
config DCACHE_SZ8
    bool "8"
config DCACHE_SZ16
    bool "16"
config DCACHE_SZ32
    bool "32"
config DCACHE_SZ64
    bool "64"
config DCACHE_SZ128
    bool "128"
config DCACHE_SZ256
    bool "256"
endchoice

choice
    prompt "Line size (bytes/line)"
    depends on DCACHE_ENABLE
    default DCACHE_LZ16
    help
    The data cache line size. Can be set to either 16 or 32 bytes per
    line. A smaller line size gives better associativity and higher
    cache hit rate, but requires a larger tag memory.

config DCACHE_LZ16
    bool "16"
config DCACHE_LZ32
    bool "32"
endchoice

choice
    prompt "Replacement alorithm"
    depends on DCACHE_ENABLE && (! DCACHE_ASSO1)
    default DCACHE_ALGORND
    help
    See the explanation for instruction cache replacement algorithm.

config DCACHE_ALGORND
    bool "Random"
config DCACHE_ALGOLRU
    bool "LRU/Dynamic"
endchoice

config DCACHE_LOCK
    bool "Cache locking"
    depends on DCACHE_ENABLE && (! DCACHE_ASSO1)
    help
    Say Y here to enable cache locking in the data cache.
    Locking can be done on cache-line level, but will increase the
    width of the tag ram with one bit. If you don't know what
    locking is good for, it is safe to say N.

config DCACHE_SNOOP
    bool "AHB snooping"
    depends on DCACHE_ENABLE
    help
    Say Y here to enable data cache snooping on the AHB bus.

    With snooping, AHB writes by other masters to data that is in the
    data cache will be automatically detected and the cache line will
    be marked as invalid. This simplifies software design in systems
    with DMA units or multiple processors accessing the same memory.
    It is a requirement (together with separate snoop tags) to run
    Linux on more than one CPU.

    Depending on the separate snoop tags option, snooping will be
    implemented using either dual-port (common tags) or two-port
    RAMs (separate tags). A workaround if dual port RAMs are
    not available for the target technology is to use separate
    snoop tags even if it is not needed otherwise.

config DCACHE_SNOOP_SEPTAG
    bool "Separate physical/snoop tags"
    depends on DCACHE_ENABLE && DCACHE_SNOOP
    default n
    help
    Enable a separate memory to store the data tags used for snooping.
    This is necessary when snooping support is wanted in systems
    with MMU, typically for SMP systems. In this case, the snoop
    tags will contain the physical tag address while the normal
    tags contain the virtual tag address.

    When separate snoop tags are enabled, the tag RAMs will be implemented
    using two-port RAMs instead of dual-port RAMs. A workaround if
    dual port RAMs are not available for the target technology is
    therefore to use separate snoop tags even if it is not needed.

config DCACHE_SNOOP_SP
    bool "Use SP RAM for separate tags"
    depends on DCACHE_ENABLE && DCACHE_SNOOP && LEON3 && DCACHE_SNOOP_SEPTAG
    default n
    help
    Use single-port RAM to implement separate physical tags. This leads
    to the cache tag valid bits being implemented in flip-flops.

config CACHE_FIXED
    hex "Fixed cacheability map"
    default 0
    help
    If this variable is 0, the cacheable memory regions are defined
    by the AHB plug&play information (default). To overriden the
    plug&play settings, this variable can be set to indicate which
    areas should be cached. The value is treated as a 16-bit hex value
    with each bit defining if a 256 Mbyte segment should be cached or not.
    The right-most (LSB) bit defines the cacheability of AHB address
    0 - 256 MByte, while the left-most bit (MSB) defines AHB address
    3840 - 4096 MByte. If the bit is set, the corresponding area is
    cacheable. A value of 00F3 defines address 0 - 0x20000000 and
    0x40000000 - 0x80000000 as cacheable.

config BWMASK
    hex "64/128-bit AHB bus map (only affects LEON4)"
    default 0
    
choice
    prompt "Cache and AHB data width (only affects LEON4)"
    default CACHE_64BIT

config CACHE_64BIT
    bool "64-bit"
config CACHE_128BIT
    bool "128-bit"
endchoice

config DCACHE_LRAM
    bool "Enable local data RAM"
    depends on LEON3 && MMU_ENABLE
    default n
    help
    Say Y here to add a local ram to the data cache controller.
    Accesses to the ram (load/store) will be performed at 0 waitstates
    and store data will never be written back to the AHB bus.

choice
    prompt "Local data RAM size (kbytes)"
    depends on DCACHE_LRAM
    default DCACHE_LRAM_SZ4
    help
    Defines the size of the local data ram in Kbytes. Note that most
    technology libraries do not support larger rams than 16 Kbyte.
config DCACHE_LRAM_SZ1
    bool "1"
config DCACHE_LRAM_SZ2
    bool "2"
config DCACHE_LRAM_SZ4
    bool "4"
config DCACHE_LRAM_SZ8
    bool "8"
config DCACHE_LRAM_SZ16
    bool "16"
config DCACHE_LRAM_SZ32
    bool "32"
config DCACHE_LRAM_SZ64
    bool "64"
config DCACHE_LRAM_SZ128
    bool "128"
config DCACHE_LRAM_SZ256
    bool "256"
endchoice

config DCACHE_LRSTART
    hex "Local data RAM start address (8 MSB)"
    depends on DCACHE_LRAM
    default 8F
    help
    Defines the 8 MSB bits of start address of the local data ram.
    By default set to 8f (start address = 0x8f000000), but any value
    (except 0) is possible. Note that the local data ram 'shadows'
    a 16 Mbyte block of the address space.

endmenu # Cache system

menu "MMU"

menuconfig MMU_ENABLE
    bool "Enable MMU"
    default n
    help
    Say Y here to enable the Memory Management Unit.

choice
    prompt "MMU type"
    depends on MMU_ENABLE
    default MMU_COMBINED
    help
    Select "combined" for a combined icache/dcache table lookaside buffer,
    "split" for a split icache/dcache table lookaside buffer

config MMU_COMBINED
    bool "combined"
config MMU_SPLIT
    bool "split"
endchoice

choice
    prompt "TLB replacement sheme"
    depends on MMU_ENABLE
    default MMU_REPINCREMENT
    help
    Select "LRU" to use the "least recently used" algorithm for TLB
    replacement, or "Increment" for a simple incremental replacement
    scheme.

config MMU_REPARRAY
    bool "LRU"
config MMU_REPINCREMENT
    bool "Increment"
endchoice

choice
    prompt "Instruction (or combined) TLB entries"
    depends on MMU_ENABLE
    default MMU_I8
    help
    Select the number of entries for the instruction TLB, or the
    combined icache/dcache TLB if such is used.

config MMU_I2
    bool "2"
config MMU_I4
    bool "4"
config MMU_I8
    bool "8"
config MMU_I16
    bool "16"
config MMU_I32
    bool "32"
config MMU_I64
    bool "64"
endchoice

choice
    prompt "Data TLB entries"
    depends on MMU_ENABLE && MMU_SPLIT
    default MMU_D8
    help
    Select the number of entries for the dcache TLB.
config MMU_D2
    bool "2"
config MMU_D4
    bool "4"
config MMU_D8
    bool "8"
config MMU_D16
    bool "16" 
config MMU_D32
    bool "32" 
config MMU_D64
    bool "64"
endchoice

config MMU_FASTWB
    bool "Fast writebuffer"
    depends on MMU_ENABLE && MMU_SPLIT
    default n
    help
    Only selectable if split tlb is enabled. In case fast writebuffer is
    enabled the tlb hit will be made concurrent to the cache hit. This 
    leads to higher store performance, but increased power and area.

choice
    prompt "MMU page size"
    depends on MMU_ENABLE
    default MMU_PAGE_4K
    help
    The deafult SPARC V8 SRMMU page size is 4 Kbyte. This limits the
    cache way size to 4 Kbyte, and total data cache size to 16 Kbyte,
    when the MMU is used. To increase the maximum data cache size,
    the MMU pages size can be increased to up 32 Kbyte. This will
    give a maximum data cache size of 128 Kbyte.

    Note that an MMU page size different than 4 Kbyte will require
    a special linux tool-chain if glibc is used. If you don't know
    what you are doing, stay with 4 Kbyte.

config MMU_PAGE_4K
    bool "4K"
config MMU_PAGE_8K
    bool "8K"
config MMU_PAGE_16K
    bool "16K"
config MMU_PAGE_32K
    bool "32K"
config MMU_PAGE_PROG
    bool "Programmable"
endchoice

endmenu # MMU

menu "Debug Support Unit"

menuconfig DSU_ENABLE
    bool "Enable LEON Debug support unit"
    default n
    help
    The debug support unit (DSU) allows non-intrusive debugging and tracing
    of both executed instructions and AHB transfers. If you want to enable
    the DSU, say Y here and select the configuration below.

config DSU_ITRACE
    bool "Instruction trace buffer"
    depends on DSU_ENABLE
    default n
    help
    If you say Y here, an instruction trace buffer will be implemented
    in each processor. The trace buffer will trace executed instructions
    and their results, and place them in a circular buffer. The buffer 
    can be read out by any AHB master, and in particular by the debug 
    communication link.

choice 
    prompt "Instruction trace buffer size (kbytes)"
    depends on DSU_ENABLE && DSU_ITRACE
    default DSU_ITRACESZ1
    help
    Select the buffer size (in kbytes) for the instruction trace buffer. 
    Each line in the buffer needs 16 bytes. A 128-entry buffer will thus
    need 2 kbyte.
config DSU_ITRACESZ1
    bool "1"
config DSU_ITRACESZ2
    bool "2"
config DSU_ITRACESZ4
    bool "4"
config DSU_ITRACESZ8
    bool "8"
config DSU_ITRACESZ16
    bool "16"
endchoice

config DSU_ITRACE_2P
    bool "Enable two-port instruction trace buffer"
    depends on DSU_ENABLE && DSU_ITRACE
    default n
    help
    If you say Y here, the instruction trace buffer will be implemented
    in each processor with a two-port RAM. It will then be possible
    to read the buffer through its second port, while the processor 
    instructions are being traced.

config DSU_ATRACE
    bool "AHB trace buffer"
    depends on DSU_ENABLE
    default n
    help
    If you say Y here, an AHB trace buffer will be implemented in the
    debug support unit processor. The AHB buffer will trace all transfers
    on the AHB bus and save them in a circular buffer. The trace buffer 
    can be read out by any AHB master, and in particular by the debug 
    communication link.

choice
    prompt "AHB trace buffer size (kbytes)"
    depends on DSU_ENABLE && DSU_ATRACE
    default DSU_ATRACESZ1
    help
    Select the buffer size (in kbytes) for the AHB trace buffer. 
    Each line in the buffer needs 16 bytes. A 128-entry buffer will thus
    need 2 kbyte.

config DSU_ATRACESZ1
    bool "1"
config DSU_ATRACESZ2
    bool "2"
config DSU_ATRACESZ4
    bool "4"
config DSU_ATRACESZ8
    bool "8"
config DSU_ATRACESZ16
    bool "16"
endchoice

config DSU_AFILT
    bool "Enable AHB trace buffer filters"
    depends on DSU_ENABLE && DSU_ATRACE
    default n
    help
    If you say Y here, the debug support unit will allow filtering of
    AHB trace buffer inputs. Filters allow to select which masters,
    slaves and types of accesses that should be saved to the buffer.

config DSU_ASTAT
    bool "Enable statistics outputs"
    depends on DSU_ENABLE && DSU_ATRACE
    default n
    help
    If you say Y here, the debug support unit will enable its statistics
    outputs. These outputs can be connected to a L4STAT unit in order to
    count events on the AHB bus. This option will also enable AHB trace
    buffer filters.

choice
    prompt "AHB watchpoints"
    depends on DSU_ENABLE && DSU_ATRACE
    default DSU_AHBWP2
    help
    Selects if AHB data breakpoints should be enabled. Pipelined option
    is best for timing but has an overhead in area. Selecting just
    Enabled prevents inclusion of pipeline registers but may cause long
    timing paths between the AMBA AHB data vectors and the DSU.
    The recommended setting is pipelined unless system frequency and
    available area is low.

config DSU_AHBWP2
    bool "Pipelined"
config DSU_AHBWP1
    bool "Enabled"
config DSU_AHBWP0
    bool "Disabled"
endchoice

menuconfig STAT_ENABLE
    bool "Enable LEON Statistics Module"
    default n
    help
    Say Y here to enable the LEON Statistical Unit. The unit consists
    of a number of timers that can count various processor and MMU/FPU
    events to allow analysis of processor behavior and performance. 
    
config STAT_CNT
    int "Number of counters (1 - 64)"
    depends on STAT_ENABLE
    default 4
    help
    Set the number of 32-bit counters in the unit (1 - 32).

config STAT_NMAX
    int "Number of accumulative counters"
    depends on STAT_ENABLE
    default 0
    help
    If this value is higher than 0, the core will include functionality 
    for tracking the longest consecutive time that an event is active or 
    inactive. The functionality will be available for the nmax first 
    counters. This value must not exceed the number of available counters.

endmenu # Debug Support Unit

menu "Fault-tolerance"

choice 
    prompt "IU Register file protection"
    default IUFT_NONE
    help
    Select the FT implementation in the LEONFT integer unit 
    register file.

    For LEON3FT the options are: none. parity, parity with sparing,
    7-bit BCH, 7-bit BCH with on-the-fly (OTF) correction,
    technology-specific protection and TMR.

    For LEON4FT the options are none and TMR.

config IUFT_NONE
    bool "None"
config IUFT_PAR
    bool "Parity"
config IUFT_DMR
    bool "PDMR"
config IUFT_BCH
    bool "BCH"
config IUFT_BCHOTF
    bool "BCH-OTF"
config IUFT_TECHSPEC
    bool "TechSpec"
config IUFT_TMR
    bool "TMR"
endchoice

choice
    prompt "FPU Register file protection"
    depends on FPU_ENABLE
    default FPUFT_NONE

config FPUFT_NONE
    bool "None"
config FPUFT_PAR
    bool "Parity"
config FPUFT_DMR
    bool "PDMR"
config FPUFT_TMR
    bool "TMR"
endchoice

config RF_ERRINJ
    bool "Register file error injection"
    default n
    help
    Say Y here to enable error injection in to the IU/FPU regfiles.
    Affects only simulation.

choice
    prompt "Cache memory protection"
    default CACHE_FT_NONE
    help
    Enable SEU error-correction in the cache memories.

    None - No protection
    Parity     - Technology agnostic parity protection
    SECDEC-BCH - SECDED for cache, slow and large area overhead
    TechSpec   - Use target technology protection

    The recommended setting is Parity. Target technologies
    with built in protection on SRAMs can have area savings
    with TechSpec. Currently this option should only be used
    for Microsemi RTG4.

config CACHE_FT_NONE
    bool "None"
config CACHE_FT_EN
    bool "Parity"
config CACHE_FT_BCH
    bool "SECDEC-BCH"
config CACHE_FT_TECH
    bool "TechSpec"
endchoice

config CACHE_ERRINJ
    bool "Cache memory error injection"
    default n
    help
    Say Y here to enable error injection in to the cache memories.
    Affects only simulation.

endmenu # Fault-tolerance

menu "VHDL debug settings"

config IU_DISAS
    bool "Processor disassembly to console"
    default n
    help
    Enable printing of executed instructions to the console.

config IU_DISAS_NET
    bool "Processor disassembly in netlist"
    depends on IU_DISAS
    default n
    help
    Enable printing of executed instructions to the console also
    when simulating a netlist. NOTE: with this option enabled, it
    will not be possible to pass place&route.

config DEBUG_PC32
    bool "32-bit program counters"
    default n
    help
    Since the LSB 2 bits of the program counters always are zero, they are
    normally not implemented. If you say Y here, the program counters will
    be implemented with full 32 bits, making debugging of the VHDL model
    much easier. Turn of this option for synthesis or you will be wasting
    area.

endmenu # VHDL debug settings

endmenu # Processor
