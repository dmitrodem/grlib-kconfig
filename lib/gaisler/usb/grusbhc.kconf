menuconfig GRUSBHC_ENABLE
    bool "Gaisler Research USB 2.0 Host Controller"
    default n
    help
    Say Y here to enable the Gaisler Research USB 2.0 Host Controller.
    The core contains one EHCI controller which can be configured to
    contain 0 to 15 UHCI companion controllers. The controller can also
    be configured to exclude the EHCI controller. The EHCI controller
    contains one AHB master interface to access memory and one APB slave
    for accessing control registers. The UHCI controller contains one AHB
    master interface for accessing memory and one AHB slave interface for
    accessing control registers.

config GRUSBHC_EHC
    bool "Enable Enhanced Host Controller"
    depends on GRUSBHC_ENABLE
    default n
    help
    Say Y here to enable the Gaisler Research Enhanced Host Controller.
    This USB 2.0 controller implements the Enhanced Host Controller 
    Interface and supports High-Speed USB traffic. 

config GRUSBHC_UHC
    bool "Enable Universal Host Controller"
    depends on GRUSBHC_ENABLE
    default n
    help
    Say Y here to enable the Gaisler Research Universal Host Controller.
    This USB 1.1 controller implements the Universal Host Controller
    Interface and supports Full- and Low-Speed USB traffic. Controllers
    of this type will be configured as companion controllers if the
    Enhanced Host Controller is enabled.

config GRUSBHC_NCC
    int "Number of Universal Host Controllers (1-15)"
    depends on GRUSBHC_ENABLE && GRUSBHC_UHC
    default 1
    help
    Number of companion (universal) host controllers. A universal host
    controller may handle up to fifteen ports. Some designers choose
    to implement one universal host controller per port. If you are
    unsure, set this value to 1 to let one controller handle all ports.

config GRUSBHC_NPORTS
    int "Total number of ports  (1-15)"
    depends on GRUSBHC_ENABLE
    default 1
    help
    Number of transceivers connected to the core.

choice
    prompt "Transceiver interface"
    depends on GRUSBHC_ENABLE
    default GRUSBHC_ULPI
    help
    Select the interface of the transceiver(s) that the core will be
    connected to.

config GRUSBHC_ULPI
    bool "ULPI"
config GRUSBHC_UTMI16
    bool "UTMI+16-bit"
config GRUSBHC_UTMI8
    bool "UTMI+8-bit"
endchoice

choice
    prompt "Bus power generation"
    depends on GRUSBHC_ENABLE && GRUSBHC_ULPI
    default GRUSBHC_VBUSEXT
    help
    Selects the source for bus power generation. Select External if
    external USB power switch is used (recommended for USB hosts) or
    select Internal if not USB power switch is present and ULPI
    transceiver should generate VBUS.

config GRUSBHC_VBUSEXT
    bool "External"
config GRUSBHC_VBUSINT
    bool "Internal"
endchoice

choice
    prompt "External bus fault indicator"
    depends on GRUSBHC_ENABLE && GRUSBHC_ULPI && GRUSBHC_VBUSEXT
    default GRUSBHC_FAULTL
    help
    Selects active level of fault signal from external USB power switch.
    Select None if the external USB power switch doesn't have fault 
    detection.

config GRUSBHC_FAULTL
    bool "ActiveLow"
config GRUSBHC_FAULTH
    bool "ActiveHigh"
config GRUSBHC_FAULTN
    bool "None"
endchoice

choice
    prompt "Bus power enable signal"
    depends on GRUSBHC_ENABLE && (! GRUSBHC_ULPI)
    default GRUSBHC_ENABLEH
    help
    Selects the active level of the outgoing vbus enable signal
    (connected between the core's drvvbus output and a USB power switch
     enable input). The UTMI+ specification defines the drvvbus signal to be
    active high, but GRUSBHC can be configured with an active low
    drvvbus in order to support more USB power switches without the
    need for an external inverter.

config GRUSBHC_ENABLEH
    bool "ActiveHigh"
config GRUSBHC_ENABLEL
    bool "ActiveLow"
endchoice

choice 
    prompt "Bus power fault indicator"
    depends on GRUSBHC_ENABLE && (! GRUSBHC_ULPI)
    default GRUSBHC_FAULT2H
    help
    Selects the active level of the incoming vbus valid indicator
    (connected between the core's vbusvalid input and a USB power switch
    fault ouput). The UTMI+ specification defines the vbusvalid signal to be
    active high, but GRUSBHC can be configured with an active low
    vbusvalid in order to support more USB power switches without the
    need for an external inverter.

config GRUSBHC_FAULT2H
    bool "ActiveHigh"
config GRUSBHC_FAULT2L
    bool "ActiveLow"
endchoice

comment "Memory interface"

config GRUSBHC_BEREGS
    bool "Enable big endian register interface"
    depends on GRUSBHC_ENABLE
    default n
    help
    The host controller works internally with little endian. If the
    controller is connected to a big endian bus (such as the AMBA bus
    in GRLIB) endian conversion must be enabled.

config GRUSBHC_BEDESC
    bool "Enable big endian descriptors"
    depends on GRUSBHC_ENABLE
    default n
    help
    With this option enabled the register space will be arranged 
    according to big endian addressing. If this option is 
    not enabled the register space of both controllers will be
    byte swapped. See the IP core user's manual for details.

config GRUSBHC_BWRD
    int "Maximum burst length in words (1-256)"
    depends on GRUSBHC_ENABLE
    default 16
    help
    Maximum burst length in words.

comment "Port routing"

config GRUSBHC_PRR
    bool "Port routing rules"
    depends on GRUSBHC_ENABLE
    default n
    help
    If CONFIG_GRUSBHC_PRR are disabled the lowest CONFIG_GRUSBHC_NPCC
    ports are routed to the lowest numbered companion controller and
    so on. If CONFIG_GRUSBHC_PRR is enabled each port can be 
    individually routed to a specific companion controller. 

config GRUSBHC_NPCC
    int "Number of ports per companion controller (1-15)"
    depends on GRUSBHC_ENABLE && (! GRUSBHC_PRR)
    default 1
    help
    Number of ports per companion controller. This option must be 
    consistent with number of ports and number of companion 
    controllers. Number of companion controller multiplied with 
    this value may not be less than the total number of ports. 
    In addition, there can not be a companion controller that is left 
    without ports.

config GRUSBHC_PR1
    int "Route port 1 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 1 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR2
    int "Route port 2 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 2 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR3
    int "Route port 3 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 3 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR4
    int "Route port 4 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 4 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR5
    int "Route port 5 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 5 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR6
    int "Route port 6 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 6 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR7
    int "Route port 7 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 7 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR8
    int "Route port 8 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 8 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR9
    int "Route port 9 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 9 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR10
    int "Route port 10 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 10 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR11
    int "Route port 11 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 11 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR12
    int "Route port 12 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 12 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR13
    int "Route port 13 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 13 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR14
    int "Route port 14 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 14 should be routed to. Unused
    ports should have their value set to 0.

config GRUSBHC_PR15
    int "Route port 15 to companion controller"
    depends on GRUSBHC_ENABLE && GRUSBHC_PRR
    default 0
    help
    The companion controller that port 15 should be routed to. Unused
    ports should have their value set to 0.
